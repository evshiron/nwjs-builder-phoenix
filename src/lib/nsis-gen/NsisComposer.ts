
import { relative, resolve, win32 } from 'path';

import { readdirAsync, lstatAsync } from 'fs-extra-promise';

const globby = require('globby');

interface NsisComposerOptions {

    // Basic.
    appName: string;
    companyName: string;
    description: string;
    version: string;
    copyright: string;

    // Compression.
    compression: 'zlib' | 'bzip2' | 'lzma';
    solid: boolean;

    // Styles.
    xpStyle: boolean;

    // Files.
    srcDir: string;

    // Output.
    output: string;

}

export class NsisComposer {

    public static DIVIDER = '################################################################################';

    constructor(protected options: NsisComposerOptions) {

    }

    public async make(): Promise<string> {

        return `${ NsisComposer.DIVIDER }
#
# Generated by nsis-gen.
#
${ NsisComposer.DIVIDER }

${ await this.makeGeneralSection() }
${ await this.makeResourcesSection() }
${ await this.makeInstallSection() }
${ await this.makeUninstallSection() }
`;

    }

    protected async makeGeneralSection(): Promise<string> {

        return `${ NsisComposer.DIVIDER }
#
# General
#
${ NsisComposer.DIVIDER }

Name "${ this.options.appName }"
Caption "${ this.options.appName }"
BrandingText "${ this.options.appName }"
OutFile "${ win32.normalize(resolve(this.options.output)) }"
InstallDir "$PROGRAMFILES\\${ this.options.appName }"
SetCompressor ${ this.options.solid ? '/SOLID' : '' } ${ this.options.compression }
XPStyle ${ this.options.xpStyle ? 'on' : 'off' }
`;

    }

    protected async makeResourcesSection(): Promise<string> {

        return `${ NsisComposer.DIVIDER }
#
# Resources
#
${ NsisComposer.DIVIDER }

VIProductVersion "${ this.options.version }"
VIAddVersionKey "ProductName" "${ this.options.appName }"
VIAddVersionKey "CompanyName" "${ this.options.companyName }"
VIAddVersionKey "FileDescription" "${ this.options.description }"
VIAddVersionKey "FileVersion" "${ this.options.version }"
VIAddVersionKey "LegalCopyright" "${ this.options.copyright }"
`;

    }

    protected async makeInstallSection(): Promise<string> {

        return `${ NsisComposer.DIVIDER }
#
# Main
#
${ NsisComposer.DIVIDER }

Section -Install

SetShellVarContext current
SetOverwrite ifnewer

${ await this.makeInstallerFiles() }

WriteUninstaller "$INSTDIR\\uninstall.exe"

SectionEnd
`;

    }

    protected async makeUninstallSection(): Promise<string> {

        return `${ NsisComposer.DIVIDER }
#
# Uninstall
#
${ NsisComposer.DIVIDER }

Section Uninstall

RMDir /r "$INSTDIR\\*.*"
RMDir "$INSTDIR"

SectionEnd
`;

    }

    protected async makeInstallerFiles(): Promise<string> {

        const out: string[] = [];
        await this.readdirLines(resolve(this.options.srcDir), resolve(this.options.srcDir), out);

        return out.join('\n');

    }

    protected async readdirLines(dir: string, baseDir: string, out: string[]) {

        const lines = [];
        const pendingFiles = [];

        const files = await readdirAsync(dir);

        if(files.length > 0) {
            const path = win32.normalize(relative(baseDir, dir));
            lines.push(`SetOutPath "$INSTDIR${ path == '.' ? '' : `\\${ path }` }"`);
        }

        for(const file of files) {

            const path = resolve(dir, file);
            const stat = await lstatAsync(path);

            if(stat.isFile()) {
                lines.push(`File "${ win32.normalize(path) }"`);
            }
            else if(stat.isDirectory()) {
                pendingFiles.push(path);
            }

        }

        for(const file of pendingFiles) {
            await this.readdirLines(resolve(dir, file), resolve(baseDir), lines);
        }

        out.push(...lines);

    }

}
