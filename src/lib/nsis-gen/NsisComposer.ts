import {resolve, win32} from 'path';

import {fixWindowsVersion} from '../util';

export interface INsisComposerOptions {

    // Basic.
    appName: string;
    companyName: string;
    description: string;
    version: string;
    copyright: string;

    icon: string;
    unIcon: string;

    // Compression.
    compression: 'zlib' | 'bzip2' | 'lzma';
    solid: boolean;

    languages: string[];

    installDirectory: string;

    // Output.
    output: string;

}

export class NsisComposer {

    public static DIVIDER = '################################################################################';

    public static STRINGS: any = {
        'English': `
LangString CREATE_DESKTOP_SHORTCUT 1033 "Create Desktop Shortcut"
LangString INSTALLING 1033 "Installing"
        `,
        'SimpChinese': `
LangString CREATE_DESKTOP_SHORTCUT 2052 "创建桌面快捷方式"
LangString INSTALLING 2052 "正在安装"
        `,
        'TradChinese': `
LangString CREATE_DESKTOP_SHORTCUT 1028 "建立桌面捷徑"
LangString INSTALLING 1028 "安裝中"
        `,
    };

    protected fixedVersion: string;

    constructor(public options: INsisComposerOptions) {

        if(!this.options.appName) {
            this.options.appName = 'NO_APPNAME';
        }

        if(!this.options.companyName) {
            this.options.companyName = 'NO_COMPANYNAME';
        }

        if(!this.options.description) {
            this.options.description = 'NO_DESCRIPTION';
        }

        if(!this.options.version) {
            this.options.version = 'NO_VERSION';
        }

        if(!this.options.copyright) {
            this.options.copyright = 'NO_COPYRIGHT';
        }

        this.options.compression = this.options.compression || 'lzma';
        this.options.solid = this.options.solid ? true : false;
        this.options.languages = this.options.languages && this.options.languages.length > 0 ? this.options.languages : [ 'English' ];

        this.fixedVersion = fixWindowsVersion(this.options.version);

    }

    public getUninstallerName() {
        return 'Uninstall';
    }

    public async make(): Promise<string> {

        return `
################################################################################
#
# Generated by nsis-gen.
#
################################################################################

################################################################################
#
# Includes
#
################################################################################
${ await this.makeIncludes() }

################################################################################
#
# Strings
#
################################################################################
${ await this.makeStrings() }

################################################################################
#
# General
#
################################################################################
${ await this.makeGeneral() }

################################################################################
#
# Variables
#
################################################################################
${ await this.makeVariables() }

################################################################################
#
# Modern UI
#
################################################################################
${ await this.makeModernUI() }

################################################################################
#
# Versioning
#
################################################################################
${ await this.makeVersioning() }

################################################################################
#
# Hooks
#
################################################################################
${ await this.makeHooks() }

################################################################################
#
# Install
#
################################################################################
${ await this.makeInstallSection() }

################################################################################
#
# Uninstall
#
################################################################################
${ await this.makeUninstallSection() }`;

    }

    protected async makeIncludes(): Promise<string> {
        return `
!include "common.nsh"
`;
    }

    protected async makeStrings(): Promise<string> {
        return `

!define _APPNAME "${ this.options.appName }"
!define _UNINSTNAME "${ this.getUninstallerName() }"
!define _COMPANYNAME "${ this.options.companyName }"
!define _DESCRIPTION "${ this.options.description }"
!define _VERSION "${ this.fixedVersion }"
!define _COPYRIGHT "${ this.options.copyright }"
!define _OUTPUT "${ win32.normalize(resolve(this.options.output) ) }"

${ this.options.languages.map((language) => {
    return NsisComposer.STRINGS[language] ? NsisComposer.STRINGS[language] : '';
}) }`;
    }

    protected async makeGeneral(): Promise<string> {
        return `
Unicode true

Name "\${_APPNAME}"
Caption "\${_APPNAME}"
BrandingText "\${_APPNAME} \${_VERSION}"
${
    this.options.icon
    ? `Icon "${ win32.normalize(resolve(this.options.icon)) }"`
    : ''
}
${
    this.options.unIcon
    ? `UninstallIcon "${ win32.normalize(resolve(this.options.unIcon)) }"`
    : ''
}

SetCompressor ${ this.options.solid ? '/SOLID' : '' } ${ this.options.compression }

InstallDir "${ this.options.installDirectory }"
InstallDirRegKey HKCU "Software\\\${_APPNAME}" "InstallDir"

RequestExecutionLevel user
XPStyle on

# General - OutFile
${ await this.makeGeneralOutFile() }

`;
    }

    protected async makeGeneralOutFile(): Promise<string> {
        return `OutFile "\${_OUTPUT}"`;
    }

    protected async makeVariables(): Promise<string> {
        return `

Var StartMenuFolder
`;
    }

    protected async makeModernUI(): Promise<string> {
        return `

!include "MUI2.nsh"

!define MUI_STARTMENUPAGE_REGISTRY_ROOT "HKCU"
!define MUI_STARTMENUPAGE_REGISTRY_KEY "Software\\\${_APPNAME}"
!define MUI_STARTMENUPAGE_REGISTRY_VALUENAME "StartMenuFolder"

# Modern UI - Install Wizard
${ await this.makeModernUIInstallWizard() }

# Modern UI - Uninstall Wizard
${ await this.makeModernUIUnInstallWizard() }

${
    this.options.languages.map((language) => {
        return `!insertmacro MUI_LANGUAGE "${ language }"`;
    }).join('\n')
}

${
    this.options.languages.length > 1
    ? `!insertmacro MUI_RESERVEFILE_LANGDLL`
    : ''
}`;
    }

    protected async makeModernUIInstallWizard(): Promise<string> {
        return `
Function CreateDesktopShortcut
    CreateShortcut "$DESKTOP\\\${_APPNAME}.lnk" "$INSTDIR\\\${_APPNAME}.exe"
FunctionEnd

!define MUI_FINISHPAGE_SHOWREADME ""
!define MUI_FINISHPAGE_SHOWREADME_TEXT "$(CREATE_DESKTOP_SHORTCUT)"
!define MUI_FINISHPAGE_SHOWREADME_FUNCTION CreateDesktopShortcut

!define MUI_FINISHPAGE_RUN "$INSTDIR\\\${_APPNAME}.exe"

!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_STARTMENU "Application" $StartMenuFolder
!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH
        `;
    }

    protected async makeModernUIUnInstallWizard(): Promise<string> {
        return `
!insertmacro MUI_UNPAGE_WELCOME
!insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES
!insertmacro MUI_UNPAGE_FINISH
        `;
    }

    protected async makeVersioning(): Promise<string> {
        return `

VIProductVersion "\${_VERSION}"
VIAddVersionKey /LANG=0 "ProductName" "\${_APPNAME}"
VIAddVersionKey /LANG=0 "CompanyName" "\${_COMPANYNAME}"
VIAddVersionKey /LANG=0 "FileDescription" "$\{_DESCRIPTION}"
VIAddVersionKey /LANG=0 "FileVersion" "\${_VERSION}"
VIAddVersionKey /LANG=0 "LegalCopyright" "\${_COPYRIGHT}"`;
    }

    protected async makeHooks(): Promise<string> {
        return `
Function .onInit
    ${ await this.makeHookOnInit() }
FunctionEnd`;
    }

    protected async makeHookOnInit(): Promise<string> {
        return `
    ${this.options.languages.length > 1 ? `!insertmacro MUI_LANGDLL_DISPLAY` : ''}`;
    }

    protected async makeInstallSection(): Promise<string> {
        return `

Section -Install

    SetShellVarContext current
    SetOverwrite ifnewer
    
    WriteRegStr HKCU "Software\\\${_APPNAME}" "InstallDir" "$INSTDIR"
    
    # Install - installer Files
    ${ await this.makeInstallerFiles() }
    
    # Install - Mui Startmenu Var
    ${ await this.makeInstallSectionMuiStartmenuVar() }
    
    # Install - Install Section End
    ${ await this.makeInstallSectionEnd() }

SectionEnd`;
    }

    protected async makeInstallSectionMuiStartmenuVar(): Promise<string> {
        return `  
    !insertmacro MUI_STARTMENU_WRITE_BEGIN "Application"
    
        CreateDirectory "$SMPROGRAMS\\$StartMenuFolder"
        CreateShortcut "$SMPROGRAMS\\$StartMenuFolder\\\${_APPNAME}.lnk" "$INSTDIR\\\${_APPNAME}.exe"
        CreateShortcut "$SMPROGRAMS\\$StartMenuFolder\\\${_UNINSTNAME}.lnk" "$INSTDIR\\\${_UNINSTNAME}.exe"
    
    !insertmacro MUI_STARTMENU_WRITE_END
     `;
    }

    protected async makeInstallSectionEnd(): Promise<string> {
        return `  
    WriteUninstaller "$INSTDIR\\\${_UNINSTNAME}.exe"`;
    }

    protected async makeUninstallSection(): Promise<string> {
        return `
Section Uninstall

    # FIXME: Remove installed files only.
    RMDir /r "$INSTDIR"
    
    # uninstallSectionMui
    ${ await this.makeUninstallSectionMui() }
    
    Delete "$DESKTOP\\\${_APPNAME}.lnk"
    
    DeleteRegKey HKCU "Software\\\${_APPNAME}"

SectionEnd`;
    }

    protected async makeUninstallSectionMui(): Promise<string> {
        return `        
    !insertmacro MUI_STARTMENU_GETFOLDER "Application" $StartMenuFolder
    
    Delete "$SMPROGRAMS\\$StartMenuFolder\\\${_APPNAME}.lnk"
    Delete "$SMPROGRAMS\\$StartMenuFolder\\\${_UNINSTNAME}.lnk"
    RMDir "$SMPROGRAMS\\$StartMenuFolder"
        `;
    }

    protected async makeInstallerFiles(): Promise<string> {
        return `
    SetOutPath "$INSTDIR"
    FILE /r .\\*.*`;
    }

}
